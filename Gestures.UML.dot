digraph GamingWithGestures {
    node [
        shape = "record"
        fontname = "Verdana,DejaVu Sans,Bitstream Vera Sans"
    ];

    HandTrackingModule [
        label = "{\N||+
            main()\l
        }";
    ];

    handDetector [
        label = "{\N
            |+
                mode: bool\l+
                maxHands: int\l+
                modelComplex: int\l+
                detectionCon: float\l+
                trackCon: float\l+
                mpHands: module\l+
                hands: mediapipe.python.solutions.hands.Hands\l+
                mpDraw: module\l+
                results: type\l
            |+
                handDetector(mode: bool,\l maxHands: int, modelComplex: int,\l detectionCon: float, trackCon: float)\l+
                findHands(img: numpy.ndarray,\l draw: bool): numpy.ndarray\l+
                findPosition(img: numpy.ndarray,\l handNo: int, draw: bool): list\l+
                fingerCombination(lmList: list): int\l
        }"
    ]

    FingerIdentifier [
        label = "{Finger Identifier
            |+
                wCam: int\l+
                hCam: int\l+
                camera: cv2.VideoCapture\l+
                pTime: float\l+
                cTime: float\l+
                fps: float\l+
                detector: handDetector\l+
                success: bool\l+
                frame: numpy.ndarray\l+
                lmList: list\l+
                key: int\l
            |+
                indexFinger(lmList: list): int\l+
                middleFinger(lmList: list): int\l+
                ringFinger(lmList: list): int\l+
                pinkyFinger(lmList: list): int\l+
                thumbFinger(lmList: list): int\l+
                allFingers(lmList: list): int\l
        }"
    ];

    FingerMovement [
        label = "{\N
            |+
                wCam: int\l+
                hCam: int\l+
                camera: cv2.VideoCapture\l+
                pTime: float\l+
                cTime: float\l+
                fps: float\l+
                detector: handDetector\l+
                success: bool\l+
                frame: numpy.ndarray\l+
                lmList: list\l+
                fingerComb: int\l+
                key: int\l
            |+
                gameMovement(cameraVal: int): str\l
        }"
    ]

    HandDirection [
        label = "{\N
            |+
                mode: bool\l+
                maxHands: int\l+
                modelComplex: int\l+
                detectionCon: float\l+
                trackCon: float\l+
                mpHands: module\l+
                hands: mediapipe.python.solutions.hands.Hands\l+
                mpDraw: module\l+
                results: type\l
            |+
                northHand(lmList: list): int\l+
                eastHand(lmList: list): int\l+
                westHand(lmList: list): int\l+
                southHand(lmList: list): int\l
        }"
    ];

    StaticGesturesClass [
        label = "{Static Gestures Class
            |+
                wCam: int\l+
                hCam: int\l+
                camera: cv2.VideoCapture\l+
                pTime: float\l+
                cTime: float\l+
                fps: float\l+
                detector: handDetector\l+
                success: bool\l+
                frame: numpy.ndarray\l+
                lmList: list\l+
                fingerComb: int\l+
                key: int\l
            |+
                rock(lmList: list): int\l+
                gnarly(lmList: list): int\l+
                peace(lmList: list): int\l+
                fist(lmList: list): int\l+
                loser(lmList: list): int\l
        }"
    ]

    HandTrackingModule -> handDetector [style="dashed", taillabel="1", label="uses", headlabel="1   "];
    FingerIdentifier -> handDetector [style="dashed", taillabel="1", label="uses", headlabel="1   "];
    FingerMovement -> handDetector [style="dashed", taillabel="1", label="uses", headlabel="1 "];
    HandDirection -> handDetector [style="dashed", taillabel="1", label="uses", headlabel="1"];
    StaticGesturesClass -> handDetector [style="dashed", taillabel="1", label="uses", headlabel="    1"];
    
}