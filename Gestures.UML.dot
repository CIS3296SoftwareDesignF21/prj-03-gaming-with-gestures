digraph GamingWithGestures {
    node [
        shape = "record",
        fontname = "Verdana,DejaVu Sans,Bitstream Vera Sans"
    ];

    subgraph cluster_mediapipe_python_solutions_hands
    {
        label = "«library»\nmediapipe.python.solutions.hands";

        Hands [
            label = "{\N||+
                Hands(static_image_mode: bool,\l
                 max_num_hands: int, model_complexity: int,\l
                 min_detection_confidence: float,\l
                 min_tracking_confidence: float)\l+
                process(image: np.ndarray): type\l
            }";
        ];
    };

    subgraph cluster_Prj03
    {
        label = "prj-03-gaming-with-gestures";

        HandTrackingModule [
            label = "{\N||+
                main()\l
            }";
        ];

        handDetector [
            label = "{HandTrackingModule.\N
                |+
                    mode: bool\l+
                    maxHands: int\l+
                    modelComplex: int\l+
                    detectionCon: float\l+
                    trackCon: float\l+
                    mpHands: module\l+
                    hands: mediapipe.python.solutions.hands.Hands\l+
                    mpDraw: module\l+
                    results: type\l
                |+
                    handDetector(mode: bool, maxHands: int,\l
                     modelComplex: int, detectionCon: float,\l
                     trackCon: float)\l+
                    findHands(img: numpy.ndarray, draw: bool):\l
                     numpy.ndarray\l+
                    findPosition(img: numpy.ndarray, handNo: int,\l
                     draw: bool): list\l+
                    fingerCombination(lmList: list): int\l
            }"
        ]

        FingerIdentifier [
            label = "{Finger Identifier
                |+
                    wCam: int\l+
                    hCam: int\l+
                    camera: cv2.VideoCapture\l+
                    pTime: float\l+
                    cTime: float\l+
                    fps: float\l+
                    detector: handDetector\l+
                    success: bool\l+
                    frame: numpy.ndarray\l+
                    lmList: list\l+
                    key: int\l
                |+
                    indexFinger(lmList: list): int\l+
                    middleFinger(lmList: list): int\l+
                    ringFinger(lmList: list): int\l+
                    pinkyFinger(lmList: list): int\l+
                    thumbFinger(lmList: list): int\l+
                    allFingers(lmList: list): int\l
            }"
        ];

        FingerMovement [
            label = "{\N
                |+
                    wCam: int\l+
                    hCam: int\l+
                    camera: cv2.VideoCapture\l+
                    pTime: float\l+
                    cTime: float\l+
                    fps: float\l+
                    detector: handDetector\l+
                    success: bool\l+
                    frame: numpy.ndarray\l+
                    lmList: list\l+
                    fingerComb: int\l+
                    key: int\l
                |+
                    gameMovement(cameraVal: int): str\l
            }"
        ]

        HandDirection [
            label = "{\N
                |+
                    wCam: int\l+
                    hCam: int\l+
                    camera: cv2.VideoCapture\l+
                    pTime: float\l+
                    cTime: float\l+
                    fps: float\l+
                    detector: handDetector\l+
                    success: bool\l+
                    frame: numpy.ndarray\l+
                    lmList: list\l+
                    key: int\l
                |+
                    northHand(lmList: list): int\l+
                    eastHand(lmList: list): int\l+
                    westHand(lmList: list): int\l+
                    southHand(lmList: list): int\l
            }"
        ];

        StaticGesturesClass [
            label = "{Static Gestures Class
                |+
                    wCam: int\l+
                    hCam: int\l+
                    camera: cv2.VideoCapture\l+
                    pTime: float\l+
                    cTime: float\l+
                    fps: float\l+
                    detector: handDetector\l+
                    success: bool\l+
                    frame: numpy.ndarray\l+
                    lmList: list\l+
                    fingerComb: int\l+
                    key: int\l
                |+
                    rock(lmList: list): int\l+
                    gnarly(lmList: list): int\l+
                    peace(lmList: list): int\l+
                    fist(lmList: list): int\l+
                    loser(lmList: list): int\l
            }"
        ];

    };

    handDetector -> Hands [
        style="dashed", label="uses",
        taillabel="\n1",
        arrowhead="vee", headlabel="1 "
    ]

    HandTrackingModule -> handDetector [
        style="dashed", label="uses",
        taillabel="0..1",
        arrowhead="vee", headlabel="1\n\n"
    ];
    FingerIdentifier -> handDetector [
        style="dashed", label="uses",
        taillabel="0..1",
        arrowhead="vee", headlabel="   1"
    ];
    FingerMovement -> handDetector [
        style="dashed", label="uses",
        taillabel="0..1",
        arrowhead="vee", headlabel="1 "
    ];
    HandDirection -> handDetector [
        style="dashed", label="uses",
        taillabel="0..1  ",
        arrowhead="vee", headlabel="1\n"
    ];
    StaticGesturesClass -> handDetector [
        style="dashed", label="uses",
        taillabel="0..1   ",
        arrowhead="vee", headlabel="1\n\n"
    ];

}
